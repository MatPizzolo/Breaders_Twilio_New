"""
Django settings for breaders_twilio_bot project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$w&^=ht5o@pah35q+(rnj4i-zs!1xy-6i6g#pqp#rof9ladi9i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Read ngrok URL from file if it exists
NGROK_HOST = None
NGROK_URL = None

try:
    # Buscar en el directorio de Docker
    if os.path.exists('/app/ngrok_host.txt'):
        with open('/app/ngrok_host.txt', 'r') as f:
            NGROK_HOST = f.read().strip()
    
    if os.path.exists('/app/ngrok_url.txt'):
        with open('/app/ngrok_url.txt', 'r') as f:
            NGROK_URL = f.read().strip()
    
    # Buscar en el directorio base del proyecto
    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    if not NGROK_HOST and os.path.exists(os.path.join(base_dir, 'ngrok_host.txt')):
        with open(os.path.join(base_dir, 'ngrok_host.txt'), 'r') as f:
            NGROK_HOST = f.read().strip()
    
    if not NGROK_URL and os.path.exists(os.path.join(base_dir, 'ngrok_url.txt')):
        with open(os.path.join(base_dir, 'ngrok_url.txt'), 'r') as f:
            NGROK_URL = f.read().strip()
            
    # Tambi√©n verificar variables de entorno
    if not NGROK_HOST and 'NGROK_HOST' in os.environ:
        NGROK_HOST = os.environ.get('NGROK_HOST')
    
    if not NGROK_URL and 'NGROK_URL' in os.environ:
        NGROK_URL = os.environ.get('NGROK_URL')
    
    print(f"BASE_DIR: {base_dir}")
    print(f"NGROK_HOST: {NGROK_HOST}")
    print(f"NGROK_URL: {NGROK_URL}")
        
except Exception as e:
    print(f"Error reading ngrok URL: {e}")

# Add ngrok host to allowed hosts if available
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
if NGROK_HOST:
    ALLOWED_HOSTS.append(NGROK_HOST)

# Set base URL for webhooks
BASE_URL = NGROK_URL if NGROK_URL else 'http://localhost:8000'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whatsapp_bot',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'breaders_twilio_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'breaders_twilio_bot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Cache configuration for persistent user state storage
# Using local memory cache for development, consider using Redis or Memcached for production
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'whatsapp-bot-cache',
    }
}

# Twilio Configuration
from dotenv import load_dotenv
import logging

# Configure logging
logger = logging.getLogger(__name__)

# Configure file-based logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
        'whatsapp_bot': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Load environment variables from .env file in the root Breaders directory
dotenv_path = os.path.join(os.path.dirname(BASE_DIR), '.env')
load_dotenv(dotenv_path)

# Debug information about .env file
logger.info(f"Loading .env from: {dotenv_path}")
logger.info(f"File exists: {os.path.exists(dotenv_path)}")

TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_WHATSAPP_NUMBER = os.getenv('TWILIO_WHATSAPP_NUMBER')
TWILIO_ASSISTANT_ID = os.getenv('TWILIO_ASSISTANT_ID')

# Debug information about Twilio credentials
logger.info(f"TWILIO_ACCOUNT_SID: {'Set' if TWILIO_ACCOUNT_SID else 'Not set'}")
logger.info(f"TWILIO_AUTH_TOKEN: {'Set' if TWILIO_AUTH_TOKEN else 'Not set'}")
logger.info(f"TWILIO_WHATSAPP_NUMBER: {'Set' if TWILIO_WHATSAPP_NUMBER else 'Not set'}")
logger.info(f"TWILIO_ASSISTANT_ID: {'Set' if TWILIO_ASSISTANT_ID else 'Not set'}")

# Print warning if TWILIO_ASSISTANT_ID is not set
if not TWILIO_ASSISTANT_ID:
    logger.warning("TWILIO_ASSISTANT_ID is not set. AI Assistant fallback will not work.")

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}
print('BASE_DIR:', BASE_DIR)
print('dotenv_path:', dotenv_path)
