#!/usr/bin/env python
"""
Script de desarrollo para breaders_twilio_bot

Este script configura un entorno de desarrollo local para el bot de WhatsApp:
1. Inicia un t√∫nel ngrok para exponer el servidor local a Internet
2. Actualiza la configuraci√≥n de Django con la URL de ngrok
3. Inicia el servidor de desarrollo de Django
4. Proporciona informaci√≥n para configurar los webhooks de Twilio

Uso:
    python run_dev.py
    python run_dev.py --stop  # Para detener todos los procesos en ejecuci√≥n
"""
import os
import sys
import json
import time
import signal
import socket
import threading
import subprocess
import requests
import argparse
from urllib.parse import urlparse
from django.conf import settings
from django.core.management import call_command

# Evento para se√±alizar que ngrok est√° listo
ngrok_ready_event = threading.Event()

# Lista para mantener referencia a los procesos
processes = []

def close_all_processes():
    """Cierra todos los procesos de forma ordenada, incluyendo ngrok"""
    print("\nüõëÔ∏è Cerrando todos los procesos...")
    
    # Primero intentamos cerrar los procesos que tenemos registrados
    for process in processes:
        try:
            print(f"üîÑ Terminando proceso: {process.args[0] if hasattr(process, 'args') else 'desconocido'}")
            process.terminate()
            process.wait(timeout=5)
        except Exception as e:
            print(f"‚ö†Ô∏è Error al cerrar proceso: {e}")
    
    # Asegurarnos de que ngrok se cierre correctamente
    try:
        print("üîÑ Buscando procesos de ngrok...")
        ngrok_pids = subprocess.run(
            ["pgrep", "-f", "ngrok http"],
            capture_output=True, 
            text=True
        ).stdout.strip().split('\n')
        
        for pid in ngrok_pids:
            if pid:
                print(f"üîÑ Terminando ngrok (PID: {pid})...")
                subprocess.run(["kill", pid])
    except Exception as e:
        print(f"‚ö†Ô∏è Error al buscar/terminar ngrok: {e}")
    
    # Asegurarnos de que Django runserver se cierre correctamente
    try:
        print("üîÑ Buscando procesos de Django runserver...")
        django_pids = subprocess.run(
            ["pgrep", "-f", "runserver"],
            capture_output=True, 
            text=True
        ).stdout.strip().split('\n')
        
        for pid in django_pids:
            if pid:
                print(f"üîÑ Terminando Django runserver (PID: {pid})...")
                subprocess.run(["kill", pid])
    except Exception as e:
        print(f"‚ö†Ô∏è Error al buscar/terminar Django runserver: {e}")
    
    # Eliminar archivos temporales de ngrok
    try:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        ngrok_host_file = os.path.join(base_dir, 'ngrok_host.txt')
        ngrok_url_file = os.path.join(base_dir, 'ngrok_url.txt')
        
        if os.path.exists(ngrok_host_file):
            os.remove(ngrok_host_file)
            print("üîÑ Archivo temporal ngrok_host.txt eliminado")
            
        if os.path.exists(ngrok_url_file):
            os.remove(ngrok_url_file)
            print("üîÑ Archivo temporal ngrok_url.txt eliminado")
    except Exception as e:
        print(f"‚ö†Ô∏è Error al eliminar archivos temporales de ngrok: {e}")
    
    print("‚úÖ Todos los procesos han sido cerrados.")

def signal_handler(sig, frame):
    """Manejador de se√±ales para cierre ordenado"""
    close_all_processes()
    sys.exit(0)

def setup_django():
    """Configura Django para ser usado fuera de un entorno web"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'breaders_twilio_bot.settings')
    import django
    django.setup()
    from django.conf import settings
    return settings

def check_port_in_use(port):
    """Verifica si un puerto est√° en uso"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

def find_free_port(start_port=8000, max_attempts=10):
    """Encuentra un puerto libre a partir de start_port"""
    port = start_port
    attempts = 0
    
    while check_port_in_use(port) and attempts < max_attempts:
        port += 1
        attempts += 1
    
    if attempts >= max_attempts:
        raise Exception(f"No se pudo encontrar un puerto libre despu√©s de {max_attempts} intentos")
    
    return port

def kill_process_on_port(port):
    """Intenta matar el proceso que est√° usando un puerto espec√≠fico"""
    try:
        # Obtener el PID del proceso que usa el puerto
        result = subprocess.run(
            ["lsof", "-i", f":{port}", "-t"],
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0 or not result.stdout.strip():
            return False
        
        pid = result.stdout.strip()
        print(f"üîÑ Intentando terminar proceso en puerto {port} (PID: {pid})...")
        
        # Intentar matar el proceso
        kill_result = subprocess.run(["kill", pid])
        
        # Verificar si el puerto ahora est√° libre
        time.sleep(1)  # Dar tiempo para que el proceso termine
        return not check_port_in_use(port)
    except Exception as e:
        print(f"‚ö†Ô∏è Error al intentar liberar el puerto {port}: {e}")
        return False

def check_port_and_handle(default_port=8000):
    """Verifica si el puerto por defecto est√° en uso y maneja la situaci√≥n"""
    if check_port_in_use(default_port):
        print(f"‚ö†Ô∏è El puerto {default_port} ya est√° en uso")
        
        # Intentar matar el proceso
        if kill_process_on_port(default_port):
            print(f"‚úÖ Puerto {default_port} liberado exitosamente")
            return default_port
        
        # Si no se pudo matar, buscar un puerto alternativo
        print(f"üîÑ Buscando un puerto alternativo...")
        alt_port = find_free_port(default_port + 1)
        print(f"‚úÖ Puerto alternativo encontrado: {alt_port}")
        return alt_port
    
    return default_port

def run_django():
    """Ejecuta el servidor de desarrollo est√°ndar de Django (runserver)"""
    try:
        # Ejecutar migraciones primero
        print("üîÑ Ejecutando migraciones de Django...")
        migrate_process = subprocess.run(
            [sys.executable, 'manage.py', 'migrate'],
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        
        if migrate_process.returncode != 0:
            print("‚ö†Ô∏è Advertencia: Las migraciones no se completaron correctamente")
        else:
            print("‚úÖ Migraciones completadas")
        
        # Verificar si el puerto 8000 est√° en uso
        port = check_port_and_handle()
        
        # Iniciar el servidor de desarrollo de Django
        print(f"üöÄ Iniciando servidor Django en el puerto {port}...")
        django_process = subprocess.Popen(
            [sys.executable, 'manage.py', 'runserver', f'0.0.0.0:{port}', '--verbosity', '2'],
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        processes.append(django_process)
        
        print(f"‚úÖ Servidor Django iniciado en http://localhost:{port}/")
        print("\nAcceso a la administraci√≥n de Django:")
        print(f"  ‚Üí http://localhost:{port}/admin/")
        print("\nEndpoint de webhook de WhatsApp:")
        print(f"  ‚Üí http://localhost:{port}/webhook/whatsapp/")
        
        # Mantener el proceso principal en ejecuci√≥n
        django_process.wait()
    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"‚ùå Error al iniciar Django: {e}")
        print("\nPor favor, verifica la configuraci√≥n de tu proyecto Django.")
        sys.exit(1)

def update_twilio_webhook(ngrok_url):
    """
    Actualiza el webhook de Twilio con la URL de ngrok
    
    Args:
        ngrok_url: URL p√∫blica de ngrok
    """
    try:
        # Cargar configuraci√≥n de Twilio
        settings = setup_django()
        account_sid = settings.TWILIO_ACCOUNT_SID
        auth_token = settings.TWILIO_AUTH_TOKEN
        
        if not account_sid or not auth_token:
            print("‚ö†Ô∏è No se encontraron credenciales de Twilio en la configuraci√≥n")
            print("‚ÑπÔ∏è Configura manualmente el webhook de Twilio con la siguiente URL:")
            print(f"   {ngrok_url}/webhook/whatsapp/")
            return
        
        # Construir la URL del webhook (nota: cambiado a /webhook/whatsapp/ para coincidir con las URLs de Django)
        webhook_url = f"{ngrok_url}/webhook/whatsapp/"
        
        print(f"üîÑ Actualizando webhook de Twilio a: {webhook_url}")
        
        try:
            # Intentar actualizar el webhook autom√°ticamente usando la API de Twilio
            from twilio.rest import Client
            client = Client(account_sid, auth_token)
            
            # Buscar n√∫meros de WhatsApp asociados a la cuenta
            incoming_phone_numbers = client.incoming_phone_numbers.list()
            whatsapp_numbers = []
            
            for number in incoming_phone_numbers:
                if 'whatsapp' in number.friendly_name.lower():
                    whatsapp_numbers.append(number)
            
            if whatsapp_numbers:
                for number in whatsapp_numbers:
                    print(f"üîÑ Actualizando webhook para {number.friendly_name}...")
                    number.update(
                        sms_url=webhook_url,
                        sms_method='POST'
                    )
                print("‚úÖ Webhooks de Twilio actualizados autom√°ticamente")
            else:
                # Si no se encuentran n√∫meros de WhatsApp, mostrar instrucciones manuales
                print("‚ö†Ô∏è No se encontraron n√∫meros de WhatsApp configurados")
                print("‚ÑπÔ∏è Para configurar el webhook de Twilio manualmente:")
                print(f"   1. Ve a https://www.twilio.com/console/sms/whatsapp/sandbox")
                print(f"   2. En 'When a message comes in', configura esta URL: {webhook_url}")
                print(f"   3. Aseg√∫rate de seleccionar HTTP POST como m√©todo")
        except ImportError:
            print("‚ö†Ô∏è No se pudo importar el cliente de Twilio. Instalando...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'twilio'])
            print("‚ÑπÔ∏è Por favor, configura el webhook manualmente:")
            print(f"   1. Ve a https://www.twilio.com/console/sms/whatsapp/sandbox")
            print(f"   2. En 'When a message comes in', configura esta URL: {webhook_url}")
            print(f"   3. Aseg√∫rate de seleccionar HTTP POST como m√©todo")
        except Exception as e:
            print(f"‚ö†Ô∏è Error al actualizar webhook autom√°ticamente: {e}")
            print("‚ÑπÔ∏è Por favor, configura el webhook manualmente:")
            print(f"   1. Ve a https://www.twilio.com/console/sms/whatsapp/sandbox")
            print(f"   2. En 'When a message comes in', configura esta URL: {webhook_url}")
            print(f"   3. Aseg√∫rate de seleccionar HTTP POST como m√©todo")
    except Exception as e:
        print(f"‚ùå Error al actualizar webhook de Twilio: {e}")
        print("‚ÑπÔ∏è Por favor, configura el webhook manualmente:")
        print(f"   1. Ve a https://www.twilio.com/console/sms/whatsapp/sandbox")
        print(f"   2. En 'When a message comes in', configura esta URL: {ngrok_url}/webhook/whatsapp/")
        print(f"   3. Aseg√∫rate de seleccionar HTTP POST como m√©todo")

def run_ngrok():
    """Ejecuta ngrok y actualiza la configuraci√≥n de Django con la nueva URL"""
    # Verificar si ngrok ya est√° en ejecuci√≥n
    try:
        check_ngrok = subprocess.run(
            ['pgrep', '-f', 'ngrok http'],
            capture_output=True,
            text=True
        )
        if check_ngrok.stdout.strip():
            print("‚ö†Ô∏è ngrok ya est√° en ejecuci√≥n. Terminando proceso anterior...")
            subprocess.run(['pkill', '-f', 'ngrok http'])
            time.sleep(2)  # Dar m√°s tiempo para que termine
    except Exception as e:
        print(f"‚ÑπÔ∏è No se pudo verificar si ngrok est√° en ejecuci√≥n: {e}")
    
    # Verificar si ngrok est√° instalado
    try:
        subprocess.run(['which', 'ngrok'], check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("‚ùå ngrok no est√° instalado. Por favor, inst√°lalo desde https://ngrok.com/download")
        ngrok_ready_event.set()  # Se√±alizar para continuar con el flujo
        return
    
    # Iniciar ngrok con par√°metros mejorados
    print("üöÄ Iniciando t√∫nel ngrok...")
    try:
        ngrok_process = subprocess.Popen(
            ['ngrok', 'http', '8000', '--log=stdout'],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )
        processes.append(ngrok_process)
    except Exception as e:
        print(f"‚ùå Error al iniciar ngrok: {e}")
        print("Continuando sin ngrok. El servidor solo ser√° accesible localmente.")
        ngrok_ready_event.set()
        return
    
    # Dar a ngrok tiempo suficiente para iniciar
    print("‚è≥ Esperando a que ngrok inicie completamente...")
    time.sleep(5)  # Aumentar el tiempo de espera inicial
    
    # Intentar obtener informaci√≥n del t√∫nel con reintentos
    max_retries = 5  # Aumentar el n√∫mero de reintentos
    retry_count = 0
    tunnel_found = False
    wait_time = 2  # Tiempo inicial de espera entre reintentos
    
    while not tunnel_found and retry_count < max_retries:
        try:
            print(f"üîÑ Obteniendo informaci√≥n del t√∫nel ngrok (intento {retry_count + 1}/{max_retries})...")
            # Intentar acceder directamente a la API de t√∫neles con seguimiento de redirecciones
            print(f"üîÑ Intentando acceder a la API de ngrok...")
            
            # Usar -L para seguir redirecciones
            ngrok_api = subprocess.run(
                ['curl', '-s', '-L', 'http://localhost:4040/api/tunnels'],
                capture_output=True,
                text=True
            )
            
            # Verificar que la respuesta no est√© vac√≠a
            if not ngrok_api.stdout.strip():
                print("‚ö†Ô∏è Respuesta vac√≠a de la API de ngrok, reintentando...")
                retry_count += 1
                time.sleep(wait_time)
                wait_time += 1
                continue
                
            tunnels = json.loads(ngrok_api.stdout)
            
            if not tunnels.get('tunnels'):
                print("‚ö†Ô∏è No se encontraron t√∫neles en la respuesta de ngrok, reintentando...")
                retry_count += 1
                time.sleep(wait_time)
                wait_time += 1
                continue
            
            for tunnel in tunnels.get('tunnels', []):
                if tunnel['proto'] == 'https':
                    ngrok_url = tunnel['public_url']
                    hostname = ngrok_url.replace('https://', '')
                
                    # Actualizar ALLOWED_HOSTS
                    settings = setup_django()
                    if hostname not in settings.ALLOWED_HOSTS:
                        settings.ALLOWED_HOSTS.append(hostname)
                    
                    # Guardar la informaci√≥n de ngrok en archivos y variables de entorno
                    # para que sea accesible por la configuraci√≥n de Django
                    try:
                        # Guardar en archivos temporales
                        base_dir = os.path.dirname(os.path.abspath(__file__))
                        with open(os.path.join(base_dir, 'ngrok_host.txt'), 'w') as f:
                            f.write(hostname)
                        with open(os.path.join(base_dir, 'ngrok_url.txt'), 'w') as f:
                            f.write(ngrok_url)
                        
                        # Establecer variables de entorno
                        os.environ['NGROK_HOST'] = hostname
                        os.environ['NGROK_URL'] = ngrok_url
                        
                        print(f"‚úÖ Informaci√≥n de ngrok guardada para uso de Django")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error al guardar informaci√≥n de ngrok: {e}")
                    
                    print(f"‚úÖ Django ahora es accesible en {ngrok_url}")
                    print(f"üîÑ Actualizando configuraci√≥n de Django con nuevo hostname: {hostname}")
                    
                    # Actualizar webhook de Twilio
                    update_twilio_webhook(ngrok_url)
                    
                    # Se√±alizar que ngrok est√° listo
                    ngrok_ready_event.set()
                    tunnel_found = True
                    break
            
            if not tunnel_found:
                print("‚ö†Ô∏è No se encontr√≥ t√∫nel HTTPS de ngrok, reintentando...")
                retry_count += 1
                time.sleep(wait_time)
                wait_time += 1
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è Error al decodificar JSON de ngrok (intento {retry_count + 1}): {e}")
            print(f"Respuesta recibida: '{ngrok_api.stdout[:100]}...'" if len(ngrok_api.stdout) > 100 else f"Respuesta recibida: '{ngrok_api.stdout}'")
            retry_count += 1
            time.sleep(wait_time)
            wait_time += 1
        except Exception as e:
            print(f"‚ö†Ô∏è Error al obtener URL de ngrok (intento {retry_count + 1}): {e}")
            retry_count += 1
            time.sleep(wait_time)
            wait_time += 1
    
    if not tunnel_found:
        print("‚ùå No se pudo obtener la URL de ngrok despu√©s de varios intentos")
        print("El servidor solo ser√° accesible localmente en http://localhost:8000/")
        # Se√±alizar que la configuraci√≥n de ngrok est√° completa incluso si hubo un error
        ngrok_ready_event.set()
    
    # Mantener ngrok en ejecuci√≥n
    try:
        ngrok_process.wait()
    except KeyboardInterrupt:
        pass

def print_welcome_message():
    """Imprime un mensaje de bienvenida con instrucciones"""
    print("\n" + "="*80)
    print("ü§ñ BREADERS TWILIO BOT - ENTORNO DE DESARROLLO ü§ñ".center(80))
    print("="*80)
    print("\nEste script configura un entorno de desarrollo local para el bot de WhatsApp:")
    print("1. üî• Inicia un t√∫nel ngrok para exponer el servidor local a Internet")
    print("2. üîÑ Actualiza la configuraci√≥n de Django con la URL de ngrok")
    print("3. üöÄ Inicia el servidor de desarrollo de Django")
    print("4. üìû Actualiza autom√°ticamente los webhooks de Twilio cuando es posible")
    print("5. üìà Ejecuta migraciones de la base de datos")
    print("\nComandos:")
    print("- python3 run_dev.py         ‚û°Ô∏è Inicia el entorno de desarrollo")
    print("- python3 run_dev.py --stop  ‚û°Ô∏è Detiene todos los procesos")
    print("\nPresiona Ctrl+C para detener todos los procesos")
    print("="*80 + "\n")

def check_dependencies():
    """Verifica e instala las dependencias necesarias"""
    dependencies = ['twilio', 'django']
    for dep in dependencies:
        try:
            __import__(dep)
        except ImportError:
            print(f"‚ö†Ô∏è {dep} no est√° instalado. Instalando...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', dep])

if __name__ == "__main__":
    # Procesar argumentos de l√≠nea de comandos
    parser = argparse.ArgumentParser(description="Script de desarrollo para breaders_twilio_bot")
    parser.add_argument('--stop', action='store_true', help='Detener todos los procesos en ejecuci√≥n')
    parser.add_argument('--check', action='store_true', help='Verificar dependencias y salir')
    args = parser.parse_args()
    
    # Si se solicita detener los procesos, hacerlo y salir
    if args.stop:
        close_all_processes()
        sys.exit(0)
    
    # Si se solicita verificar dependencias, hacerlo y salir
    if args.check:
        check_dependencies()
        sys.exit(0)
    
    # Configurar manejador de se√±ales para cierre ordenado
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Imprimir mensaje de bienvenida
    print_welcome_message()
    
    # Verificar dependencias
    check_dependencies()
    
    # Configurar Django
    settings = setup_django()
    
    # Iniciar ngrok en un hilo separado
    ngrok_thread = threading.Thread(target=run_ngrok)
    ngrok_thread.daemon = True
    ngrok_thread.start()
    
    # Esperar a que ngrok est√© listo antes de iniciar Django
    print("‚è≥ Esperando a que ngrok se configure completamente...")
    ngrok_ready_event.wait(timeout=30)  # Esperar hasta 30 segundos a que ngrok est√© listo
    
    if ngrok_ready_event.is_set():
        print("‚úÖ Ngrok est√° listo, iniciando servidor Django...")
        print("")
        print("="*80)
        print("")
    else:
        print("‚ö†Ô∏è Tiempo de espera agotado esperando a que ngrok se configure. Iniciando Django de todos modos...")
        print("")
        print("="*80)
        print("")
    
    # Ejecutar Django en el hilo principal
    run_django()
