"""
Test suite for TwilioAIHandler

This module provides comprehensive tests for the TwilioAIHandler class,
testing its ability to process various types of messages and interact with the Twilio Assistant API.
"""
import unittest
from unittest.mock import patch, MagicMock
from django.test import TestCase
from whatsapp_bot.services.handlers.twilio_ai_handler import TwilioAIHandler
from whatsapp_bot.services.constants import MENSAJE_NO_ENTIENDO

class TwilioAIHandlerTest(TestCase):
    """
    Tests for the TwilioAIHandler class.
    """
    
    def setUp(self):
        """Set up test environment."""
        # Mock the TwilioWhatsAppService
        self.service_patcher = patch('whatsapp_bot.services.handlers.twilio_ai_handler.TwilioWhatsAppService')
        self.mock_service_class = self.service_patcher.start()
        self.mock_service = MagicMock()
        self.mock_service_class.return_value = self.mock_service
        
        # Configure Django settings mock
        self.settings_patcher = patch('whatsapp_bot.services.handlers.twilio_ai_handler.settings')
        self.mock_settings = self.settings_patcher.start()
        self.mock_settings.TWILIO_ACCOUNT_SID = 'test_account_sid'
        self.mock_settings.TWILIO_AUTH_TOKEN = 'test_auth_token'
        self.mock_settings.TWILIO_ASSISTANT_ID = 'test_assistant_id'
        
        # Create handler instance
        self.handler = TwilioAIHandler()
        self.from_number = 'whatsapp:+5491112345678'
        
    def tearDown(self):
        """Clean up after tests."""
        self.service_patcher.stop()
        self.settings_patcher.stop()
    
    def test_initialization(self):
        """Test that the handler initializes correctly."""
        self.assertIsNotNone(self.handler.twilio_service)
        self.assertEqual(self.handler.assistant_id, 'test_assistant_id')
    
    def test_get_user_session(self):
        """Test session creation and retrieval."""
        # Test session ID creation
        session_id = self.handler._get_user_session(self.from_number)
        self.assertIsNotNone(session_id)
        self.assertTrue(session_id.startswith('session_'))
        
        # Test with different number format
        clean_number = '+5491112345678'
        clean_session = self.handler._get_user_session(clean_number)
        self.assertTrue(clean_session.startswith('session_'))
        
        # Different number should get different session
        other_number = 'whatsapp:+5491187654321'
        other_session = self.handler._get_user_session(other_number)
        self.assertNotEqual(session_id, other_session)
    
    def test_process_message_success(self):
        """Test successful message processing."""
        # Mock the assistant API call
        self.handler._call_twilio_assistant_api = MagicMock(return_value={
            'success': True,
            'response': 'This is a test response from the AI'
        })
        
        # Process a message
        response = self.handler.process_message(
            self.from_number, 
            'Hello, this is a test message',
            intent='greeting',
            confidence=0.9
        )
        
        # Verify response
        self.assertEqual(response, 'This is a test response from the AI')
        self.handler._call_twilio_assistant_api.assert_called_once()
    
    def test_process_message_failure(self):
        """Test message processing when API call fails."""
        # Mock the assistant API call to fail
        self.handler._call_twilio_assistant_api = MagicMock(return_value={
            'success': False,
            'error': 'Test error message'
        })
        
        # Process a message
        response = self.handler.process_message(
            self.from_number, 
            'Hello, this is a test message'
        )
        
        # Verify None is returned when API fails
        self.assertIsNone(response)
        self.handler._call_twilio_assistant_api.assert_called_once()
    
    def test_process_message_exception(self):
        """Test message processing when an exception occurs."""
        # Mock the assistant API call to raise an exception
        self.handler._call_twilio_assistant_api = MagicMock(side_effect=Exception('Test exception'))
        
        # Process a message
        response = self.handler.process_message(
            self.from_number, 
            'Hello, this is a test message'
        )
        
        # Verify None is returned when an exception occurs
        self.assertIsNone(response)
        self.handler._call_twilio_assistant_api.assert_called_once()
    
    def test_missing_credentials(self):
        """Test behavior when credentials are missing."""
        # Reconfigure settings with missing credentials
        self.mock_settings.TWILIO_ACCOUNT_SID = None
        self.mock_settings.TWILIO_AUTH_TOKEN = None
        
        # Create a new handler instance with missing credentials
        handler = TwilioAIHandler()
        
        # Process a message
        response = handler.process_message(
            self.from_number, 
            'Hello, this is a test message'
        )
        
        # Verify None is returned when credentials are missing
        self.assertIsNone(response)
    
    def test_missing_assistant_id(self):
        """Test behavior when assistant ID is missing."""
        # Reconfigure settings with missing assistant ID
        self.mock_settings.TWILIO_ASSISTANT_ID = None
        
        # Create a new handler instance with missing assistant ID
        handler = TwilioAIHandler()
        
        # Process a message
        response = handler.process_message(self.from_number, "Test message")
        
        # Verify None is returned when assistant ID is missing
        self.assertIsNone(response)


class ComprehensiveTwilioAIHandlerTest(TestCase):
    """
    Comprehensive tests for the TwilioAIHandler with various message types.
    """
    
    def setUp(self):
        """Set up test environment."""
        # Mock the TwilioWhatsAppService
        self.service_patcher = patch('whatsapp_bot.services.handlers.twilio_ai_handler.TwilioWhatsAppService')
        self.mock_service_class = self.service_patcher.start()
        self.mock_service = MagicMock()
        self.mock_service_class.return_value = self.mock_service
        
        # Configure Django settings mock
        self.settings_patcher = patch('whatsapp_bot.services.handlers.twilio_ai_handler.settings')
        self.mock_settings = self.settings_patcher.start()
        self.mock_settings.TWILIO_ACCOUNT_SID = 'test_account_sid'
        self.mock_settings.TWILIO_AUTH_TOKEN = 'test_auth_token'
        self.mock_settings.TWILIO_ASSISTANT_ID = 'test_assistant_id'
        
        # Create handler instance
        self.handler = TwilioAIHandler()
        self.from_number = 'whatsapp:+5491112345678'
        
    def tearDown(self):
        """Clean up after tests."""
        self.service_patcher.stop()
        self.settings_patcher.stop()
    
    @patch('whatsapp_bot.services.handlers.twilio_ai_handler.TwilioAIHandler._call_twilio_assistant_api')
    def test_comprehensive_message_types(self, mock_call_api):
        """Test processing of various message types with simulated responses."""
        # Define test cases with messages and expected responses
        test_cases = [
            {
                'category': 'Greeting',
                'message': 'Hola, ¿cómo están?',
                'response': 'Hola! Bienvenido a Breaders. ¿En qué podemos ayudarte hoy?'
            },
            {
                'category': 'Product Inquiry',
                'message': '¿Qué productos tienen disponibles?',
                'response': 'Tenemos una variedad de milanesas: de carne, pollo, cerdo y vegetarianas. También ofrecemos acompañamientos como ensalada rusa y papas fritas.'
            },
            {
                'category': 'Price Inquiry',
                'message': '¿Cuánto cuestan las milanesas de pollo?',
                'response': 'Las milanesas de pollo cuestan $1000 por kg. Para pedidos mayores a 3kg, ofrecemos un 10% de descuento.'
            },
            {
                'category': 'Hours',
                'message': '¿Cuál es su horario de atención?',
                'response': 'Nuestro horario de atención es de lunes a viernes de 9:00 a 20:00 hs y sábados de 9:00 a 14:00 hs. Los domingos permanecemos cerrados.'
            },
            {
                'category': 'Delivery',
                'message': '¿Hacen envíos a domicilio?',
                'response': 'Sí, realizamos envíos a domicilio en toda la ciudad. El costo del envío es de $500, pero es gratis para compras superiores a $5000.'
            }
        ]
        
        # Process each test case
        for case in test_cases:
            # Configure mock to return the expected response
            mock_call_api.return_value = {"success": True, "response": case['response']}
            
            # Process the message
            response = self.handler.process_message(self.from_number, case['message'])
            
            # Verify the results
            self.assertEqual(response, case['response'])
            
            # Reset the mock for the next test case
            mock_call_api.reset_mock()


if __name__ == '__main__':
    unittest.main()
