#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Test especÃ­fico para el asistente AI del bot de WhatsApp de Breaders.
Este script envÃ­a consultas complejas que deberÃ­an ser manejadas por el asistente AI.
"""

import os
import sys
import json
import requests
import time
from typing import Dict, Any, Optional

# ConfiguraciÃ³n del servidor
BASE_URL = "http://localhost:8000"
WEBHOOK_URL = "/webhook/whatsapp/"

def print_response(response):
    """
    Imprime la respuesta HTTP de manera formateada.
    
    Args:
        response: Objeto de respuesta de requests
    """
    print("\n==================================================\n")
    print(f"Status Code: {response.status_code}\n")
    
    print("Headers:")
    for key, value in response.headers.items():
        print(f"  {key}: {value}")
    
    print("\nContent:")
    print(response.text)
    
    print("\n==================================================\n")

def simulate_whatsapp_message(message: str, from_number: str = "whatsapp:+5491112345678") -> requests.Response:
    """
    Simula un mensaje de WhatsApp enviando una solicitud POST al webhook.
    
    Args:
        message: El contenido del mensaje
        from_number: El nÃºmero de telÃ©fono del remitente (formato Twilio)
        
    Returns:
        Objeto de respuesta de requests
    """
    # Datos que Twilio enviarÃ­a en una solicitud real
    payload = {
        "Body": message,
        "From": from_number,
        "To": "whatsapp:+14155238886",  # NÃºmero de Twilio
        "SmsMessageSid": f"SM{int(time.time())}",
        "NumMedia": "0",
        "ProfileName": "Usuario de Prueba",
        "WaId": from_number.replace("whatsapp:", ""),
        "SmsStatus": "received"
    }
    
    # Enviar solicitud POST al webhook
    url = f"{BASE_URL}{WEBHOOK_URL}"
    response = requests.post(url, data=payload)
    return response

def run_ai_assistant_test():
    """
    Ejecuta pruebas especÃ­ficas para el asistente AI con consultas complejas.
    """
    print("\nğŸ¤– INICIANDO PRUEBA DEL ASISTENTE AI DEL BOT DE WHATSAPP ğŸ¤–\n")
    
    # Lista de mensajes complejos que deberÃ­an ir al asistente AI
    complex_messages = [
        # Consultas familiares
        "Tengo una familia de 5 personas, Â¿quÃ© me recomendÃ¡s?",
        "Â¿QuÃ© cantidad deberÃ­a pedir para 8 personas?",
        
        # Consultas dietÃ©ticas especÃ­ficas
        "Â¿Tienen opciones para veganos?",
        "Soy celÃ­aco, Â¿quÃ© puedo comer?",
        "Â¿Las milanesas de soja son aptas para vegetarianos?",
        
        # Consultas de recomendaciÃ³n
        "Â¿CuÃ¡l es la especialidad de la casa?",
        "Â¿QuÃ© milanesa es la mÃ¡s vendida?",
        
        # Consultas de preparaciÃ³n
        "Â¿CÃ³mo se preparan las milanesas?",
        "Â¿Vienen listas para cocinar o hay que prepararlas?",
        
        # Consultas mixtas y complejas
        "Necesito milanesas para una fiesta de cumpleaÃ±os de 15 personas, Â¿quÃ© me recomiendan y cuÃ¡nto saldrÃ­a?",
        "Â¿Las milanesas veganas tienen el mismo precio que las normales? Â¿Y son igual de grandes?",
        
        # Consultas de disponibilidad
        "Â¿Tienen stock de milanesas de berenjena?",
        "Â¿Para cuÃ¡ndo podrÃ­an tener listo un pedido grande?"
    ]
    
    for i, message in enumerate(complex_messages, 1):
        print(f"\nğŸ“± MENSAJE {i}/{len(complex_messages)}: '{message}'")
        response = simulate_whatsapp_message(message)
        print_response(response)
        time.sleep(0.5)  # PequeÃ±a pausa entre mensajes
    
    print("\nâœ… PRUEBA DEL ASISTENTE AI COMPLETADA âœ…\n")

if __name__ == "__main__":
    run_ai_assistant_test()
    print("Prueba finalizada. Deteniendo el servidor...")
